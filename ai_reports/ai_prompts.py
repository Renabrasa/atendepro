# ai_reports/ai_prompts.py
"""
üî§ AI Prompts - Prompts Estruturados para An√°lise IA
Cole√ß√£o de prompts especializados para diferentes tipos de an√°lise
"""

from typing import Dict, List, Any, Optional
from datetime import datetime


class PromptBuilder:
    """
    üî§ Construtor de prompts especializados para an√°lise IA
    
    Gera prompts otimizados para diferentes cen√°rios de an√°lise
    de dados de atendimento e performance de equipes
    """
    
    @staticmethod
    def global_trend_analysis(global_stats: Dict[str, Any], weekly_data: Dict[str, Any]) -> str:
        """
        üåç Prompt para an√°lise de tend√™ncias globais
        """
        current_tickets = global_stats['current_week']['total_tickets']
        previous_tickets = global_stats['previous_week']['total_tickets']
        change = global_stats['comparison']['absolute_change']
        change_percent = global_stats['comparison']['percent_change']
        active_supervisors = global_stats['current_week']['active_supervisors']
        period = weekly_data['metadata']['current_week']['period_label']
        
        # Determinar contexto da varia√ß√£o
        if abs(change_percent) >= 30:
            intensity = "significativa"
        elif abs(change_percent) >= 15:
            intensity = "moderada"
        else:
            intensity = "leve"
        
        prompt = f"""
Voc√™ √© um analista s√™nior de opera√ß√µes de atendimento. Analise os dados semanais abaixo:

PER√çODO DE AN√ÅLISE: {period}
‚Ä¢ Atendimentos esta semana: {current_tickets}
‚Ä¢ Atendimentos semana anterior: {previous_tickets}
‚Ä¢ Varia√ß√£o: {change:+d} atendimentos ({change_percent:+.1f}%)
‚Ä¢ Supervisores ativos: {active_supervisors}
‚Ä¢ Intensidade da mudan√ßa: {intensity}

TAREFA: Forne√ßa uma an√°lise profissional focada em:

1. INTERPRETA√á√ÉO DA TEND√äNCIA
   - O que essa varia√ß√£o representa operacionalmente?
   - √â um padr√£o esperado ou at√≠pico?

2. POSS√çVEIS CAUSAS
   - Fatores que podem explicar essa mudan√ßa
   - Sazonalidade ou eventos espec√≠ficos

3. IMPACTO OPERACIONAL
   - Como isso afeta a carga de trabalho das equipes?
   - Riscos ou oportunidades identificadas

4. RECOMENDA√á√ïES IMEDIATAS
   - A√ß√µes que devem ser tomadas nesta semana
   - Pontos de aten√ß√£o para monitoramento

FORMATO: Resposta direta e actionable, m√°ximo 180 palavras.
FOCO: Insights pr√°ticos para gest√£o operacional.
"""
        return prompt.strip()
    
    @staticmethod
    def supervisor_performance_analysis(supervisor_data: Dict[str, Any], 
                                       weekly_data: Dict[str, Any],
                                       ranking_position: Optional[int] = None) -> str:
        """
        üë§ Prompt para an√°lise de performance de supervisor
        """
        supervisor = supervisor_data['supervisor']['name']
        current = supervisor_data['current_week']['total_tickets']
        previous = supervisor_data['previous_week']['total_tickets']
        change = supervisor_data['comparison']['absolute_change']
        change_percent = supervisor_data['comparison']['percent_change']
        
        agents = supervisor_data['current_week']['agents_performance']
        agents_count = len(agents)
        
        # An√°lise da distribui√ß√£o entre agentes
        if agents:
            total_agent_tickets = sum(a['current_tickets'] for a in agents)
            top_agent = max(agents, key=lambda x: x['current_tickets'])
            concentration = (top_agent['current_tickets'] / total_agent_tickets * 100) if total_agent_tickets > 0 else 0
        else:
            concentration = 0
            top_agent = None
        
        # Contexto de performance
        if change_percent >= 25:
            performance_context = "alta crescimento"
        elif change_percent >= 10:
            performance_context = "crescimento moderado"
        elif change_percent <= -25:
            performance_context = "redu√ß√£o significativa"
        elif change_percent <= -10:
            performance_context = "redu√ß√£o moderada"
        else:
            performance_context = "estabilidade"
        
        ranking_text = f"(posi√ß√£o #{ranking_position} no ranking)" if ranking_position else ""
        
        prompt = f"""
Voc√™ √© um consultor de gest√£o de equipes. Analise a performance do supervisor abaixo:

SUPERVISOR: {supervisor} {ranking_text}
PER√çODO: {weekly_data['metadata']['current_week']['period_label']}

M√âTRICAS PRINCIPAIS:
‚Ä¢ Atendimentos: {current} (anterior: {previous})
‚Ä¢ Varia√ß√£o: {change:+d} ({change_percent:+.1f}%)
‚Ä¢ Contexto: {performance_context}
‚Ä¢ Agentes na equipe: {agents_count}
‚Ä¢ Concentra√ß√£o no top agente: {concentration:.1f}%

DISTRIBUI√á√ÉO POR AGENTE:
"""
        
        # Adicionar dados dos agentes
        for i, agent in enumerate(agents[:5], 1):  # Top 5 agentes
            agent_change = agent['change']
            agent_change_percent = (agent_change / agent['previous_tickets'] * 100) if agent['previous_tickets'] > 0 else 0
            
            prompt += f"‚Ä¢ {agent['agent']['name']}: {agent['current_tickets']} atendimentos ({agent_change:+d}, {agent_change_percent:+.1f}%)\n"
        
        prompt += f"""
AN√ÅLISE SOLICITADA:

1. AVALIA√á√ÉO GERAL
   - Como avaliar esta performance no contexto atual?
   - A distribui√ß√£o de trabalho est√° equilibrada?

2. AN√ÅLISE DOS AGENTES
   - Identifique padr√µes na equipe
   - Sinalize agentes que precisam de aten√ß√£o

3. OPORTUNIDADES DE MELHORIA
   - Sugest√µes para otimizar a distribui√ß√£o
   - Como apoiar melhor a equipe

4. RECOMENDA√á√ïES ESPEC√çFICAS
   - A√ß√µes concretas para esta semana
   - Pontos de monitoramento cont√≠nuo

FORMATO: An√°lise estruturada e pr√°tica, m√°ximo 160 palavras.
FOCO: Actionable insights para gest√£o da equipe.
"""
        return prompt.strip()
    
    @staticmethod
    def agent_workload_analysis(agents_data: List[Dict[str, Any]], 
                               supervisor_name: str) -> str:
        """
        üë• Prompt para an√°lise de carga de trabalho dos agentes
        """
        if not agents_data:
            return "Nenhum agente ativo para an√°lise."
        
        total_tickets = sum(agent['current_tickets'] for agent in agents_data)
        avg_tickets = total_tickets / len(agents_data) if agents_data else 0
        
        # Identificar agentes com carga at√≠pica
        overloaded = [a for a in agents_data if a['current_tickets'] >= avg_tickets * 1.5]
        underloaded = [a for a in agents_data if a['current_tickets'] <= avg_tickets * 0.5 and a['current_tickets'] > 0]
        big_changes = [a for a in agents_data if abs(a.get('change', 0)) >= 10]
        
        prompt = f"""
Voc√™ √© um especialista em distribui√ß√£o de carga de trabalho. Analise a equipe do supervisor {supervisor_name}:

CEN√ÅRIO ATUAL:
‚Ä¢ Total de agentes: {len(agents_data)}
‚Ä¢ Total de atendimentos: {total_tickets}
‚Ä¢ M√©dia por agente: {avg_tickets:.1f}
‚Ä¢ Agentes sobrecarregados: {len(overloaded)}
‚Ä¢ Agentes com baixa demanda: {len(underloaded)}
‚Ä¢ Agentes com mudan√ßas significativas: {len(big_changes)}

DETALHAMENTO POR AGENTE:
"""
        
        for agent in agents_data:
            current = agent['current_tickets']
            change = agent.get('change', 0)
            status = "‚ö†Ô∏è" if current >= avg_tickets * 1.5 else "‚¨áÔ∏è" if current <= avg_tickets * 0.5 else "‚úÖ"
            
            prompt += f"‚Ä¢ {status} {agent['agent']['name']}: {current} atendimentos ({change:+d})\n"
        
        prompt += f"""
AN√ÅLISE NECESS√ÅRIA:

1. DISTRIBUI√á√ÉO DE CARGA
   - A distribui√ß√£o atual √© eficiente?
   - Identifique desequil√≠brios problem√°ticos

2. IDENTIFICA√á√ÉO DE RISCOS
   - Agentes em risco de sobrecarga ou burnout
   - Capacidade ociosa subutilizada

3. REDISTRIBUI√á√ÉO SUGERIDA
   - Como reequilibrar a carga de trabalho?
   - Crit√©rios para redistribui√ß√£o

4. A√á√ïES PREVENTIVAS
   - Como evitar desequil√≠brios futuros?
   - Monitoramento recomendado

FORMATO: Recomenda√ß√µes pr√°ticas, m√°ximo 140 palavras.
FOCO: Otimiza√ß√£o da distribui√ß√£o e bem-estar da equipe.
"""
        return prompt.strip()
    
    @staticmethod
    def strategic_recommendations(weekly_data: Dict[str, Any]) -> str:
        """
        üéØ Prompt para recomenda√ß√µes estrat√©gicas
        """
        supervisors = weekly_data['supervisors_data']
        global_stats = weekly_data['global_stats']
        
        # An√°lise dos supervisores
        total_supervisors = len(supervisors)
        high_performers = [s for s in supervisors if s['comparison']['percent_change'] >= 20]
        struggling = [s for s in supervisors if s['comparison']['percent_change'] <= -20]
        stable = [s for s in supervisors if abs(s['comparison']['percent_change']) < 20]
        
        # Top e bottom performers
        top_supervisor = max(supervisors, key=lambda x: x['current_week']['total_tickets']) if supervisors else None
        bottom_supervisor = min(supervisors, key=lambda x: x['current_week']['total_tickets']) if supervisors else None
        
        # An√°lise de variabilidade
        if supervisors:
            ticket_counts = [s['current_week']['total_tickets'] for s in supervisors]
            max_tickets = max(ticket_counts)
            min_tickets = min(ticket_counts)
            variability = ((max_tickets - min_tickets) / max_tickets * 100) if max_tickets > 0 else 0
        else:
            variability = 0
        
        prompt = f"""
Voc√™ √© um diretor de opera√ß√µes analisando performance semanal. Elabore recomenda√ß√µes estrat√©gicas baseadas nos dados:

CEN√ÅRIO ORGANIZACIONAL:
‚Ä¢ Per√≠odo: {weekly_data['metadata']['current_week']['period_label']}
‚Ä¢ Total de atendimentos: {global_stats['current_week']['total_tickets']}
‚Ä¢ Varia√ß√£o global: {global_stats['comparison']['absolute_change']:+d} ({global_stats['comparison']['percent_change']:+.1f}%)
‚Ä¢ Supervisores ativos: {total_supervisors}

DISTRIBUI√á√ÉO DE PERFORMANCE:
‚Ä¢ Alto desempenho (+20%): {len(high_performers)} supervisores
‚Ä¢ Performance est√°vel: {len(stable)} supervisores  
‚Ä¢ Necessitam apoio (-20%): {len(struggling)} supervisores
‚Ä¢ Variabilidade entre equipes: {variability:.1f}%
"""
        
        if top_supervisor:
            prompt += f"‚Ä¢ Top performer: {top_supervisor['supervisor']['name']} ({top_supervisor['current_week']['total_tickets']} atendimentos)\n"
        
        if bottom_supervisor and bottom_supervisor != top_supervisor:
            prompt += f"‚Ä¢ Menor volume: {bottom_supervisor['supervisor']['name']} ({bottom_supervisor['current_week']['total_tickets']} atendimentos)\n"
        
        prompt += f"""
ESTRAT√âGIAS SOLICITADAS:

1. REDISTRIBUI√á√ÉO DE RECURSOS
   - Como otimizar aloca√ß√£o entre equipes?
   - Transfer√™ncia de agentes ou responsabilidades

2. DESENVOLVIMENTO DE EQUIPES
   - Quais supervisores precisam de mentoria?
   - Programas de capacita√ß√£o recomendados

3. PROCESSOS E FERRAMENTAS
   - Melhorias nos processos de atendimento
   - Ferramentas para aumentar efici√™ncia

4. PREVEN√á√ÉO E MONITORAMENTO
   - Indicadores para acompanhar semanalmente
   - Alertas antecipados de problemas

5. RECONHECIMENTO E MOTIVA√á√ÉO
   - Como reconhecer boas performances?
   - Estrat√©gias para manter engajamento

FORMATO: 5 recomenda√ß√µes estrat√©gicas espec√≠ficas e implement√°veis.
FOCO: A√ß√µes de m√©dio prazo com impacto mensur√°vel.
"""
        return prompt.strip()
    
    @staticmethod
    def executive_summary(weekly_data: Dict[str, Any], 
                         global_analysis: Dict[str, Any],
                         supervisors_analysis: List[Dict[str, Any]]) -> str:
        """
        üìã Prompt para resumo executivo
        """
        period = weekly_data['metadata']['current_week']['period_label']
        total_tickets = weekly_data['global_stats']['current_week']['total_tickets']
        change = weekly_data['global_stats']['comparison']['absolute_change']
        change_percent = weekly_data['global_stats']['comparison']['percent_change']
        
        # An√°lise dos supervisores
        if supervisors_analysis:
            top_performer = max(supervisors_analysis, key=lambda x: x['key_metrics']['current_tickets'])
            attention_needed = [s for s in supervisors_analysis if 
                              abs(s['key_metrics']['change_percent']) >= 30 or 
                              any(agent.get('needs_attention', False) for agent in s.get('agents_insights', []))]
        else:
            top_performer = None
            attention_needed = []
        
        prompt = f"""
Voc√™ √© um C-level executivo preparando um briefing para a diretoria. Crie um resumo executivo conciso:

PERFORMANCE SEMANAL - {period}

INDICADORES CHAVE:
‚Ä¢ Volume total: {total_tickets} atendimentos
‚Ä¢ Varia√ß√£o semanal: {change:+d} ({change_percent:+.1f}%)
‚Ä¢ Supervisores monitorados: {len(supervisors_analysis)}
‚Ä¢ Equipes requerendo aten√ß√£o: {len(attention_needed)}
"""
        
        if top_performer:
            prompt += f"‚Ä¢ Melhor performance: {top_performer['supervisor_name']} ({top_performer['key_metrics']['current_tickets']} atendimentos)\n"
        
        prompt += f"""
RESUMO EXECUTIVO SOLICITADO:

1. SITUA√á√ÉO ATUAL
   - Status geral das opera√ß√µes
   - Principais conquistas da semana

2. PONTOS DE ATEN√á√ÉO
   - Riscos operacionais identificados
   - Supervisores/equipes que precisam de suporte

3. TEND√äNCIAS OBSERVADAS
   - Padr√µes emergentes
   - Mudan√ßas no comportamento operacional

4. DECIS√ïES NECESS√ÅRIAS
   - A√ß√µes que requerem aprova√ß√£o executiva
   - Recursos adicionais necess√°rios

5. OUTLOOK PR√ìXIMA SEMANA
   - Expectativas e prepara√ß√µes
   - M√©tricas para monitoramento

FORMATO: Linguagem executiva, m√°ximo 200 palavras.
FOCO: Insights estrat√©gicos e tomada de decis√£o.
"""
        return prompt.strip()
    
    @staticmethod
    def anomaly_detection(supervisor_data: Dict[str, Any], 
                         historical_context: Optional[Dict] = None) -> str:
        """
        üîç Prompt para detec√ß√£o de anomalias
        """
        supervisor = supervisor_data['supervisor']['name']
        change_percent = supervisor_data['comparison']['percent_change']
        current_tickets = supervisor_data['current_week']['total_tickets']
        agents = supervisor_data['current_week']['agents_performance']
        
        # Identificar anomalias
        anomalies = []
        
        if abs(change_percent) >= 50:
            anomalies.append(f"Varia√ß√£o extrema de {change_percent:+.1f}%")
        
        for agent in agents:
            agent_change_percent = (agent['change'] / agent['previous_tickets'] * 100) if agent['previous_tickets'] > 0 else 0
            if abs(agent_change_percent) >= 100:
                anomalies.append(f"{agent['agent']['name']}: mudan√ßa de {agent_change_percent:+.1f}%")
            if agent['current_tickets'] >= 50:
                anomalies.append(f"{agent['agent']['name']}: {agent['current_tickets']} atendimentos (poss√≠vel sobrecarga)")
        
        prompt = f"""
Voc√™ √© um analista de dados especializado em detec√ß√£o de anomalias operacionais. Investigue as anomalias identificadas:

SUPERVISOR: {supervisor}
ANOMALIAS DETECTADAS: {len(anomalies)}
"""
        
        for i, anomaly in enumerate(anomalies, 1):
            prompt += f"{i}. {anomaly}\n"
        
        prompt += f"""
CONTEXTO OPERACIONAL:
‚Ä¢ Atendimentos atuais: {current_tickets}
‚Ä¢ Varia√ß√£o semanal: {change_percent:+.1f}%
‚Ä¢ Agentes na equipe: {len(agents)}

INVESTIGA√á√ÉO REQUERIDA:

1. AN√ÅLISE DAS ANOMALIAS
   - Quais s√£o as poss√≠veis causas?
   - S√£o eventos pontuais ou tend√™ncias?

2. CLASSIFICA√á√ÉO DE RISCO
   - Grau de criticidade de cada anomalia
   - Impacto potencial nas opera√ß√µes

3. A√á√ïES IMEDIATAS
   - O que deve ser feito imediatamente?
   - Quem deve ser notificado?

4. PREVEN√á√ÉO FUTURA
   - Como detectar sinais precoces?
   - Medidas preventivas recomendadas

FORMATO: An√°lise investigativa, m√°ximo 150 palavras.
FOCO: Identifica√ß√£o de causas e a√ß√µes corretivas.
"""
        return prompt.strip()
    
    @staticmethod
    def custom_insight_prompt(context: str, data_summary: str, question: str) -> str:
        """
        üé® Prompt personalizado para insights espec√≠ficos
        """
        prompt = f"""
Voc√™ √© um consultor s√™nior de opera√ß√µes de atendimento. Analise a situa√ß√£o abaixo:

CONTEXTO: {context}

DADOS DISPON√çVEIS:
{data_summary}

PERGUNTA ESPEC√çFICA:
{question}

AN√ÅLISE SOLICITADA:
‚Ä¢ Forne√ßa uma resposta fundamentada nos dados
‚Ä¢ Seja espec√≠fico e actionable
‚Ä¢ M√°ximo 120 palavras
‚Ä¢ Foco em insights pr√°ticos para gest√£o

FORMATO: Resposta direta com recomenda√ß√µes concretas.
"""
        return prompt.strip()


# Fun√ß√µes de conveni√™ncia para uso direto
def get_global_analysis_prompt(global_stats: Dict[str, Any], weekly_data: Dict[str, Any]) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt de an√°lise global"""
    return PromptBuilder.global_trend_analysis(global_stats, weekly_data)


def get_supervisor_analysis_prompt(supervisor_data: Dict[str, Any], weekly_data: Dict[str, Any], ranking: Optional[int] = None) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt de an√°lise de supervisor"""
    return PromptBuilder.supervisor_performance_analysis(supervisor_data, weekly_data, ranking)


def get_strategic_prompt(weekly_data: Dict[str, Any]) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt estrat√©gico"""
    return PromptBuilder.strategic_recommendations(weekly_data)