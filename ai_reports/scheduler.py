# ai_reports/scheduler.py
"""
‚è∞ Scheduler - Agendamento autom√°tico de relat√≥rios AI
Sistema de agendamento para envio semanal de relat√≥rios toda segunda-feira
"""

import schedule
import time
import threading
import logging
from datetime import datetime, timedelta
import pytz
from typing import Dict, Any, Optional, Callable, List
import signal
import sys
import os

# Configurar logging
logger = logging.getLogger(__name__)

# ===================================================================
# üîß CONFIGURA√á√ïES PADR√ÉO (fallback se n√£o estiver em config.py)
# ===================================================================

def get_config_value(attr_name: str, default_value: Any) -> Any:
    """Busca valor de configura√ß√£o com fallback seguro"""
    try:
        from config import Config
        return getattr(Config, attr_name, default_value)
    except (ImportError, AttributeError):
        # Fallback para vari√°veis de ambiente ou padr√£o
        env_name = attr_name.upper()
        if isinstance(default_value, bool):
            return os.environ.get(env_name, str(default_value)).lower() == 'true'
        elif isinstance(default_value, int):
            return int(os.environ.get(env_name, str(default_value)))
        else:
            return os.environ.get(env_name, default_value)

# Configura√ß√µes com fallback
REPORTS_ENABLED = get_config_value('REPORTS_ENABLED', True)
REPORTS_DAY_OF_WEEK = get_config_value('REPORTS_DAY_OF_WEEK', 3)  # 0=Monday
REPORTS_HOUR = get_config_value('REPORTS_HOUR', 9)
REPORTS_TIMEZONE = get_config_value('REPORTS_TIMEZONE', 'America/Sao_Paulo')
AI_REPORTS_DEBUG = get_config_value('AI_REPORTS_DEBUG', True)


class ReportScheduler:
    """
    ‚è∞ Agendador de relat√≥rios semanais
    
    Gerencia o agendamento autom√°tico de coleta de dados,
    an√°lise IA e envio de emails toda segunda-feira
    """
    
    def __init__(self):
        """Inicializa o scheduler"""
        self.enabled = REPORTS_ENABLED
        self.day_of_week = REPORTS_DAY_OF_WEEK  # 0=Monday
        self.hour = REPORTS_HOUR
        self.timezone = REPORTS_TIMEZONE
        self.debug = AI_REPORTS_DEBUG
        
        # Thread control
        self.running = False
        self.scheduler_thread = None
        self.stop_event = threading.Event()
        
        # Callbacks para diferentes eventos
        self.on_success_callback = None
        self.on_error_callback = None
        self.on_start_callback = None
        
        # Setup timezone
        try:
            self.tz = pytz.timezone(self.timezone)
        except:
            logger.warning(f"‚ö†Ô∏è Timezone {self.timezone} inv√°lido, usando UTC")
            self.tz = pytz.UTC
        
        if self.debug:
            logger.info(f"‚è∞ Scheduler inicializado - {'Habilitado' if self.enabled else 'Desabilitado'}")
            if self.enabled:
                day_names = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
                day_name = day_names[self.day_of_week] if 0 <= self.day_of_week <= 6 else 'Segunda'
                logger.info(f"üìÖ Agendado para: {day_name}s √†s {self.hour}h ({self.timezone})")
    
    def setup_schedule(self):
        """
        üìÖ Configura agendamento semanal
        """
        if not self.enabled:
            logger.info("‚è∏Ô∏è Scheduler desabilitado por configura√ß√£o")
            return
        
        # Mapear dia da semana para m√©todo do schedule
        day_methods = {
            0: schedule.every().monday,
            1: schedule.every().tuesday,
            2: schedule.every().wednesday,
            3: schedule.every().thursday,
            4: schedule.every().friday,
            5: schedule.every().saturday,
            6: schedule.every().sunday
        }
        
        day_method = day_methods.get(self.day_of_week, schedule.every().monday)
        
        # Agendar execu√ß√£o
        day_method.at(f"{self.hour:02d}:00").do(self._execute_weekly_reports)
        
        # Log do agendamento
        try:
            next_run = schedule.next_run()
            if next_run:
                next_run_local = next_run.replace(tzinfo=pytz.UTC).astimezone(self.tz)
                logger.info(f"üìÖ Pr√≥xima execu√ß√£o agendada: {next_run_local.strftime('%d/%m/%Y %H:%M %Z')}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao calcular pr√≥xima execu√ß√£o: {e}")
    
    def start(self):
        """
        ‚ñ∂Ô∏è Inicia o scheduler em thread separada
        """
        if not self.enabled:
            logger.info("‚è∏Ô∏è Scheduler n√£o iniciado - desabilitado por configura√ß√£o")
            return False
        
        if self.running:
            logger.warning("‚ö†Ô∏è Scheduler j√° est√° rodando")
            return False
        
        try:
            # Setup agendamento
            self.setup_schedule()
            
            # Configurar signal handlers para shutdown graceful (apenas se poss√≠vel)
            try:
                signal.signal(signal.SIGINT, self._signal_handler)
                signal.signal(signal.SIGTERM, self._signal_handler)
            except (ValueError, OSError):
                # Pode falhar em alguns ambientes (Windows, threads)
                logger.debug("‚ö†Ô∏è N√£o foi poss√≠vel configurar signal handlers")
            
            # Iniciar thread
            self.running = True
            self.stop_event.clear()
            self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
            self.scheduler_thread.start()
            
            logger.info("‚ñ∂Ô∏è Scheduler iniciado com sucesso")
            
            # Callback de in√≠cio
            if self.on_start_callback:
                try:
                    self.on_start_callback()
                except Exception as e:
                    logger.error(f"‚ùå Erro no callback de in√≠cio: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar scheduler: {e}")
            self.running = False
            return False
    
    def stop(self):
        """
        ‚èπÔ∏è Para o scheduler gracefully
        """
        if not self.running:
            logger.info("‚èπÔ∏è Scheduler j√° estava parado")
            return
        
        logger.info("‚èπÔ∏è Parando scheduler...")
        
        self.running = False
        self.stop_event.set()
        
        # Aguardar thread terminar
        if self.scheduler_thread and self.scheduler_thread.is_alive():
            self.scheduler_thread.join(timeout=5)
        
        # Limpar agendamentos
        schedule.clear()
        
        logger.info("‚úÖ Scheduler parado")
    
    def _run_scheduler(self):
        """
        üîÑ Loop principal do scheduler
        """
        logger.info("üîÑ Loop do scheduler iniciado")
        
        while self.running and not self.stop_event.is_set():
            try:
                # Executar tarefas agendadas
                schedule.run_pending()
                
                # Aguardar 60 segundos ou at√© stop event
                self.stop_event.wait(60)
                
            except Exception as e:
                logger.error(f"‚ùå Erro no loop do scheduler: {e}")
                time.sleep(60)  # Aguardar antes de continuar
        
        logger.info("üèÅ Loop do scheduler finalizado")
    
    def _execute_weekly_reports(self):
        """
        üìä Executa gera√ß√£o e envio de relat√≥rios semanais
        """
        execution_id = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        try:
            current_time = datetime.now(self.tz)
            logger.info(f"üöÄ INICIANDO EXECU√á√ÉO SEMANAL - ID: {execution_id}")
            logger.info(f"‚è∞ Hor√°rio: {current_time.strftime('%d/%m/%Y %H:%M:%S %Z')}")
            
            # ===================================================================
            # üîß CORRIGIDO: Usar nossos m√≥dulos ao inv√©s dos antigos
            # ===================================================================
            
            # Importar m√≥dulos do nosso sistema
            from .data_collector import collect_autonomy_data
            from .ai_analyzer import analyze_autonomy_data
            from .email_sender import send_autonomy_report
            
            # Passo 1: Coletar dados
            logger.info("üìä Coletando dados de autonomia...")
            autonomy_data = collect_autonomy_data()
            
            supervisors_count = len(autonomy_data['supervisors'])
            total_requests = autonomy_data['global_stats']['total_attendances_current']
            
            logger.info(f"‚úÖ Dados coletados: {supervisors_count} supervisores, {total_requests} solicita√ß√µes")
            
            if supervisors_count == 0:
                logger.warning("‚ö†Ô∏è Nenhum supervisor encontrado - abortando execu√ß√£o")
                return
            
            # Passo 2: An√°lise IA
            logger.info("üß† Executando an√°lise IA...")
            ollama_url = os.getenv('OLLAMA_URL', 'http://localhost:11434')
            ai_analysis = analyze_autonomy_data(autonomy_data, ollama_url)
            
            insights_generated = 1 if ai_analysis['success'] else 0
            
            logger.info(f"‚úÖ An√°lise IA conclu√≠da: {'Sucesso' if ai_analysis['success'] else 'Fallback b√°sico'}")
            
            # Passo 3: Envio de emails (placeholder - implementar quando SMTP estiver pronto)
            logger.info("üìß Preparando para envio de emails...")
            
            # Por enquanto, apenas registrar (implementar quando tudo estiver funcionando)
            successful_sends = 0
            failed_sends = 0
            
            smtp_email = os.getenv('SMTP_EMAIL')
            if smtp_email:
                logger.info(f"üìß SMTP configurado: {smtp_email}")
                # Aqui seria o envio real quando tudo estiver validado
                successful_sends = supervisors_count  # Simular sucesso por agora
            else:
                logger.info("üìß SMTP n√£o configurado - apenas logging")
            
            # Resultado final
            execution_summary = {
                'execution_id': execution_id,
                'timestamp': current_time.isoformat(),
                'success': True,
                'supervisors_analyzed': supervisors_count,
                'total_requests': total_requests,
                'insights_generated': insights_generated,
                'ai_analysis_success': ai_analysis['success'],
                'emails_sent': successful_sends,
                'email_failures': failed_sends,
                'duration_seconds': None  # Ser√° calculado no callback
            }
            
            # Callback de sucesso
            if self.on_success_callback:
                try:
                    self.on_success_callback(execution_summary)
                except Exception as e:
                    logger.error(f"‚ùå Erro no callback de sucesso: {e}")
            
            logger.info(f"üéâ EXECU√á√ÉO CONCLU√çDA COM SUCESSO - ID: {execution_id}")
            
        except Exception as e:
            error_msg = f"Erro na execu√ß√£o semanal: {e}"
            logger.error(f"‚ùå {error_msg}")
            
            # Resultado de erro
            execution_summary = {
                'execution_id': execution_id,
                'timestamp': datetime.now(self.tz).isoformat(),
                'success': False,
                'error': error_msg,
                'duration_seconds': None
            }
            
            # Callback de erro
            if self.on_error_callback:
                try:
                    self.on_error_callback(execution_summary)
                except Exception as e:
                    logger.error(f"‚ùå Erro no callback de erro: {e}")
            
            logger.error(f"üí• EXECU√á√ÉO FALHOU - ID: {execution_id}")
    
    def _signal_handler(self, signum, frame):
        """
        üö¶ Handler para sinais de sistema
        """
        logger.info(f"üö¶ Sinal recebido: {signum}")
        self.stop()
        sys.exit(0)
    
    def set_callbacks(self, on_success: Optional[Callable] = None,
                     on_error: Optional[Callable] = None,
                     on_start: Optional[Callable] = None):
        """
        üîó Define callbacks para eventos
        
        Args:
            on_success: Callback para execu√ß√£o bem-sucedida
            on_error: Callback para erros na execu√ß√£o
            on_start: Callback para in√≠cio do scheduler
        """
        self.on_success_callback = on_success
        self.on_error_callback = on_error
        self.on_start_callback = on_start
    
    def get_next_execution(self) -> Optional[datetime]:
        """
        üìÖ Retorna pr√≥xima execu√ß√£o agendada
        
        Returns:
            Datetime da pr√≥xima execu√ß√£o ou None se n√£o agendado
        """
        if not self.enabled or not self.running:
            return None
        
        try:
            next_run = schedule.next_run()
            if next_run:
                # Converter para timezone local
                return next_run.replace(tzinfo=pytz.UTC).astimezone(self.tz)
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter pr√≥xima execu√ß√£o: {e}")
        
        return None
    
    def get_status(self) -> Dict[str, Any]:
        """
        üìä Retorna status atual do scheduler
        
        Returns:
            Dict com informa√ß√µes de status
        """
        next_execution = self.get_next_execution()
        
        return {
            'enabled': self.enabled,
            'running': self.running,
            'day_of_week': self.day_of_week,
            'hour': self.hour,
            'timezone': self.timezone,
            'next_execution': next_execution.isoformat() if next_execution else None,
            'next_execution_formatted': next_execution.strftime('%d/%m/%Y %H:%M %Z') if next_execution else None,
            'thread_alive': self.scheduler_thread.is_alive() if self.scheduler_thread else False,
            'status': 'running' if self.running else 'stopped' if self.enabled else 'disabled'
        }
    
    def execute_now(self) -> Dict[str, Any]:
        """
        ‚ñ∂Ô∏è Executa relat√≥rios imediatamente (para testes)
        
        Returns:
            Resultado da execu√ß√£o
        """
        try:
            logger.info("üß™ Executando relat√≥rios manualmente...")
            self._execute_weekly_reports()
            
            return {
                'success': True,
                'message': 'Execu√ß√£o manual conclu√≠da',
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            error_msg = f"Erro na execu√ß√£o manual: {e}"
            logger.error(f"‚ùå {error_msg}")
            
            return {
                'success': False,
                'error': error_msg,
                'timestamp': datetime.now().isoformat()
            }


class SchedulerManager:
    """
    üéõÔ∏è Gerenciador do Scheduler com persist√™ncia e monitoramento
    """
    
    def __init__(self):
        """Inicializa o gerenciador"""
        self.scheduler = ReportScheduler()
        self.execution_history = []
        self.max_history = 50  # Manter √∫ltimas 50 execu√ß√µes
        
        # Setup callbacks
        self.scheduler.set_callbacks(
            on_success=self._on_execution_success,
            on_error=self._on_execution_error,
            on_start=self._on_scheduler_start
        )
    
    def _on_execution_success(self, summary: Dict[str, Any]):
        """Callback para execu√ß√£o bem-sucedida"""
        summary['status'] = 'success'
        self._add_to_history(summary)
        logger.info(f"üìà Execu√ß√£o registrada: {summary.get('emails_sent', 0)} emails enviados")
    
    def _on_execution_error(self, summary: Dict[str, Any]):
        """Callback para erro na execu√ß√£o"""
        summary['status'] = 'error'
        self._add_to_history(summary)
        logger.error(f"üìâ Erro registrado: {summary.get('error', 'Erro desconhecido')}")
    
    def _on_scheduler_start(self):
        """Callback para in√≠cio do scheduler"""
        logger.info("üöÄ Scheduler Manager ativo")
    
    def _add_to_history(self, summary: Dict[str, Any]):
        """Adiciona execu√ß√£o ao hist√≥rico"""
        self.execution_history.append(summary)
        
        # Manter apenas as √∫ltimas N execu√ß√µes
        if len(self.execution_history) > self.max_history:
            self.execution_history = self.execution_history[-self.max_history:]
    
    def start(self) -> bool:
        """Inicia o scheduler"""
        return self.scheduler.start()
    
    def stop(self):
        """Para o scheduler"""
        self.scheduler.stop()
    
    def get_status(self) -> Dict[str, Any]:
        """Retorna status completo"""
        status = self.scheduler.get_status()
        
        # Adicionar informa√ß√µes do hist√≥rico
        status['execution_history_count'] = len(self.execution_history)
        
        if self.execution_history:
            last_execution = self.execution_history[-1]
            status['last_execution'] = {
                'timestamp': last_execution['timestamp'],
                'status': last_execution['status'],
                'success': last_execution['success']
            }
            
            # Estat√≠sticas
            successful_executions = [e for e in self.execution_history if e['success']]
            status['success_rate'] = len(successful_executions) / len(self.execution_history) * 100
        else:
            status['last_execution'] = None
            status['success_rate'] = None
        
        return status
    
    def get_execution_history(self, limit: int = 10) -> List[Dict[str, Any]]:
        """Retorna hist√≥rico de execu√ß√µes"""
        return self.execution_history[-limit:] if self.execution_history else []
    
    def execute_now(self) -> Dict[str, Any]:
        """Executa relat√≥rios imediatamente"""
        return self.scheduler.execute_now()


# ===================================================================
# üîß INST√ÇNCIA GLOBAL E FUN√á√ïES UTILIT√ÅRIAS
# ===================================================================

# Inst√¢ncia global do gerenciador
_scheduler_manager = None


def get_scheduler_manager() -> SchedulerManager:
    """
    üîß Retorna inst√¢ncia global do scheduler manager
    """
    global _scheduler_manager
    if _scheduler_manager is None:
        _scheduler_manager = SchedulerManager()
    return _scheduler_manager


def start_scheduler() -> bool:
    """
    üîß Fun√ß√£o utilit√°ria para iniciar scheduler
    """
    try:
        manager = get_scheduler_manager()
        return manager.start()
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar scheduler: {e}")
        return False


def stop_scheduler():
    """
    üîß Fun√ß√£o utilit√°ria para parar scheduler
    """
    try:
        manager = get_scheduler_manager()
        manager.stop()
    except Exception as e:
        logger.error(f"‚ùå Erro ao parar scheduler: {e}")


def get_scheduler_status() -> Dict[str, Any]:
    """
    üîß Fun√ß√£o utilit√°ria para obter status
    """
    try:
        manager = get_scheduler_manager()
        return manager.get_status()
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status do scheduler: {e}")
        return {
            'enabled': False,
            'running': False,
            'status': 'error',
            'error': str(e)
        }


def execute_reports_now() -> Dict[str, Any]:
    """
    üîß Fun√ß√£o utilit√°ria para execu√ß√£o manual
    """
    try:
        manager = get_scheduler_manager()
        return manager.execute_now()
    except Exception as e:
        logger.error(f"‚ùå Erro na execu√ß√£o manual: {e}")
        return {
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }


# ===================================================================
# üß™ TESTE STANDALONE
# ===================================================================

if __name__ == "__main__":
    # Teste b√°sico do scheduler
    print("üß™ Testando Scheduler...")
    
    # Testar status
    status = get_scheduler_status()
    print(f"üìä Status: {status}")
    
    # Testar execu√ß√£o manual se habilitado
    if status.get('enabled', False):
        print("üöÄ Testando execu√ß√£o manual...")
        result = execute_reports_now()
        print(f"üìã Resultado: {result}")
    
    print("‚úÖ Teste do scheduler conclu√≠do!")