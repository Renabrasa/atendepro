# ai_reports/ai_prompts.py
"""
üî§ AI Prompts - Prompts Estruturados para An√°lise IA
Cole√ß√£o de prompts especializados para diferentes tipos de an√°lise
"""

from typing import Dict, List, Any, Optional
from datetime import datetime


class PromptBuilder:
    """
    üî§ Construtor de prompts especializados para an√°lise IA
    
    Gera prompts otimizados para diferentes cen√°rios de an√°lise
    de dados de atendimento interno de RH e performance de equipes
    """
    
    @staticmethod
    def global_trend_analysis(global_stats: Dict[str, Any], weekly_data: Dict[str, Any]) -> str:
        """
        üåç Prompt para an√°lise de tend√™ncias globais
        """
        current_tickets = global_stats['current_week']['total_tickets']
        previous_tickets = global_stats['previous_week']['total_tickets']
        change = global_stats['comparison']['absolute_change']
        change_percent = global_stats['comparison']['percent_change']
        active_supervisors = global_stats['current_week']['active_supervisors']
        period = weekly_data['metadata']['current_week']['period_label']
        
        prompt = f"""
Voc√™ √© um analista de RH especializado em atendimento interno de funcion√°rios.

SISTEMA: AtendePro - Sistema interno onde supervisores de RH atendem solicita√ß√µes de funcion√°rios (quest√µes trabalhistas, d√∫vidas, suporte interno).

DADOS EXATOS DO PER√çODO:
- Per√≠odo atual: {period}
- Atendimentos per√≠odo atual: {current_tickets}
- Atendimentos per√≠odo anterior: {previous_tickets}
- Varia√ß√£o exata: {change:+d} atendimentos ({change_percent:+.1f}%)
- Supervisores ativos: {active_supervisors}

REGRAS IMPORTANTES:
- Use APENAS os n√∫meros fornecidos acima
- N√ÉO invente ou estime n√∫meros diferentes
- Foque em atendimento INTERNO de RH, n√£o clientes externos

AN√ÅLISE SOLICITADA:

1. INTERPRETA√á√ÉO DOS DADOS REAIS
   - O que significa esta varia√ß√£o de {change_percent:+.1f}% no atendimento interno?
   - √â normal para um sistema de RH interno?

2. POSS√çVEIS CAUSAS INTERNAS
   - Fatores que afetam demanda de funcion√°rios por suporte
   - Sazonalidade empresarial ou eventos internos

3. IMPACTO NA EQUIPE DE RH
   - Como essa carga afeta os supervisores?
   - Distribui√ß√£o de trabalho entre {active_supervisors} supervisores

4. RECOMENDA√á√ïES PR√ÅTICAS
   - A√ß√µes para otimizar atendimento interno
   - Pontos de aten√ß√£o para pr√≥ximo per√≠odo

FORMATO: M√°ximo 150 palavras, foque apenas nos dados fornecidos.
"""
        return prompt.strip()
    
    @staticmethod
    def supervisor_performance_analysis(supervisor_data: Dict[str, Any], 
                                       weekly_data: Dict[str, Any],
                                       ranking_position: Optional[int] = None) -> str:
        """
        üë§ Prompt para an√°lise de performance de supervisor
        """
        supervisor = supervisor_data['supervisor']['name']
        current = supervisor_data['current_week']['total_tickets']
        previous = supervisor_data['previous_week']['total_tickets']
        change = supervisor_data['comparison']['absolute_change']
        change_percent = supervisor_data['comparison']['percent_change']
        
        agents = supervisor_data['current_week']['agents_performance']
        agents_count = len(agents)
        
        ranking_text = f"(#{ranking_position} no ranking)" if ranking_position else ""
        
        prompt = f"""
Voc√™ √© um consultor de gest√£o de RH analisando performance de supervisor interno.

CONTEXTO: {supervisor} √© supervisor de RH que atende funcion√°rios internos com quest√µes trabalhistas, d√∫vidas corporativas e suporte geral.

DADOS EXATOS DO SUPERVISOR:
- Nome: {supervisor} {ranking_text}
- Per√≠odo: {weekly_data['metadata']['current_week']['period_label']}
- Atendimentos atuais: {current}
- Atendimentos anteriores: {previous}
- Varia√ß√£o exata: {change:+d} ({change_percent:+.1f}%)
- Agentes na equipe: {agents_count}

DISTRIBUI√á√ÉO REAL POR AGENTE:
"""
        
        # Adicionar dados dos agentes
        for agent in agents[:5]:  # Top 5 agentes
            agent_change = agent['change']
            prompt += f"‚Ä¢ {agent['agent']['name']}: {agent['current_tickets']} atendimentos ({agent_change:+d} vs anterior)\n"
        
        prompt += f"""
REGRAS IMPORTANTES:
- Use APENAS os n√∫meros exatos fornecidos acima
- N√ÉO crie n√∫meros que n√£o existem
- Foque em atendimento INTERNO de funcion√°rios

AN√ÅLISE ESPEC√çFICA:

1. PERFORMANCE GERAL
   - Como avaliar {current} atendimentos com varia√ß√£o de {change_percent:+.1f}%?
   - Esta carga √© adequada para um supervisor de RH?

2. DISTRIBUI√á√ÉO DA EQUIPE
   - A distribui√ß√£o entre os {agents_count} agentes est√° equilibrada?
   - Algum agente precisa de redistribui√ß√£o de carga?

3. OPORTUNIDADES DE MELHORIA
   - Como otimizar atendimento interno aos funcion√°rios?
   - Sugest√µes para melhorar efici√™ncia da equipe

4. RECOMENDA√á√ïES CONCRETAS
   - A√ß√µes espec√≠ficas para pr√≥xima semana
   - Pontos de monitoramento cont√≠nuo

FORMATO: M√°ximo 130 palavras, seja espec√≠fico e pr√°tico.
"""
        return prompt.strip()
    
    @staticmethod
    def strategic_recommendations(weekly_data: Dict[str, Any]) -> str:
        """
        üéØ Prompt para recomenda√ß√µes estrat√©gicas
        """
        supervisors = weekly_data['supervisors_data']
        global_stats = weekly_data['global_stats']
        
        # An√°lise dos supervisores
        total_supervisors = len(supervisors)
        high_performers = [s for s in supervisors if s['comparison']['percent_change'] >= 15]
        struggling = [s for s in supervisors if s['comparison']['percent_change'] <= -15]
        stable = [s for s in supervisors if abs(s['comparison']['percent_change']) < 15]
        
        # Top performer
        top_supervisor = max(supervisors, key=lambda x: x['current_week']['total_tickets']) if supervisors else None
        
        prompt = f"""
Voc√™ √© um diretor de RH analisando performance do sistema interno de atendimento.

CONTEXTO: AtendePro √© sistema interno onde supervisores de RH atendem funcion√°rios com quest√µes trabalhistas, d√∫vidas corporativas e suporte.

DADOS REAIS DO SISTEMA:
- Per√≠odo: {weekly_data['metadata']['current_week']['period_label']}
- Total de atendimentos internos: {global_stats['current_week']['total_tickets']}
- Varia√ß√£o do sistema: {global_stats['comparison']['absolute_change']:+d} ({global_stats['comparison']['percent_change']:+.1f}%)
- Supervisores ativos: {total_supervisors}

DISTRIBUI√á√ÉO DE PERFORMANCE:
- Supervisores com crescimento (+15%): {len(high_performers)}
- Supervisores est√°veis: {len(stable)}
- Supervisores em decl√≠nio (-15%): {len(struggling)}
"""
        
        if top_supervisor:
            prompt += f"‚Ä¢ Melhor performance: {top_supervisor['supervisor']['name']} ({top_supervisor['current_week']['total_tickets']} atendimentos)\n"
        
        prompt += f"""
REGRAS IMPORTANTES:
- Use APENAS os dados fornecidos acima
- Foque em otimiza√ß√£o de RH interno
- N√ÉO invente n√∫meros

RECOMENDA√á√ïES ESTRAT√âGICAS:

1. REDISTRIBUI√á√ÉO DE CARGA
   - Como balancear atendimentos entre supervisores?
   - Transfer√™ncia de responsabilidades entre equipes

2. CAPACITA√á√ÉO DE EQUIPE
   - Supervisores que precisam de treinamento
   - Programas de desenvolvimento interno

3. OTIMIZA√á√ÉO DE PROCESSOS
   - Melhorias no atendimento aos funcion√°rios
   - Ferramentas para aumentar efici√™ncia

4. MONITORAMENTO CONT√çNUO
   - Indicadores chave para acompanhar
   - Alertas para problemas futuros

5. RECONHECIMENTO DE PERFORMANCE
   - Como valorizar bons resultados
   - Estrat√©gias de motiva√ß√£o da equipe

FORMATO: 5 recomenda√ß√µes espec√≠ficas e implement√°veis, m√°ximo 180 palavras.
"""
        return prompt.strip()
    
    @staticmethod
    def executive_summary(weekly_data: Dict[str, Any], 
                         global_analysis: Dict[str, Any],
                         supervisors_analysis: List[Dict[str, Any]]) -> str:
        """
        üìã Prompt para resumo executivo
        """
        period = weekly_data['metadata']['current_week']['period_label']
        total_tickets = weekly_data['global_stats']['current_week']['total_tickets']
        change = weekly_data['global_stats']['comparison']['absolute_change']
        change_percent = weekly_data['global_stats']['comparison']['percent_change']
        
        # An√°lise dos supervisores
        if supervisors_analysis:
            top_performer = max(supervisors_analysis, key=lambda x: x['key_metrics']['current_tickets'])
            attention_needed = [s for s in supervisors_analysis if 
                              abs(s['key_metrics']['change_percent']) >= 25]
        else:
            top_performer = None
            attention_needed = []
        
        prompt = f"""
Voc√™ √© um executivo de RH preparando briefing sobre sistema interno de atendimento.

CONTEXTO: AtendePro - sistema onde supervisores de RH atendem funcion√°rios internos com quest√µes trabalhistas e suporte corporativo.

DADOS EXATOS DO PER√çODO - {period}:
- Volume total de atendimentos internos: {total_tickets}
- Varia√ß√£o exata: {change:+d} ({change_percent:+.1f}%)
- Supervisores monitorados: {len(supervisors_analysis)}
- Equipes com varia√ß√£o significativa: {len(attention_needed)}
"""
        
        if top_performer:
            prompt += f"‚Ä¢ Melhor performance: {top_performer['supervisor_name']} ({top_performer['key_metrics']['current_tickets']} atendimentos)\n"
        
        prompt += f"""
REGRAS CR√çTICAS:
- Use APENAS os n√∫meros exatos fornecidos
- N√ÉO invente dados que n√£o existem
- Foque em RH interno, n√£o clientes externos

RESUMO EXECUTIVO SOLICITADO:

1. SITUA√á√ÉO ATUAL
   - Status do atendimento interno aos funcion√°rios
   - Principais resultados do per√≠odo

2. PONTOS DE ATEN√á√ÉO
   - Supervisores/equipes que precisam de suporte
   - Riscos operacionais identificados

3. TEND√äNCIAS OBSERVADAS
   - Padr√µes na demanda dos funcion√°rios
   - Mudan√ßas no comportamento de atendimento

4. DECIS√ïES NECESS√ÅRIAS
   - A√ß√µes que requerem aprova√ß√£o executiva
   - Recursos adicionais para RH

5. PR√ìXIMOS PASSOS
   - Prepara√ß√µes para pr√≥ximo per√≠odo
   - M√©tricas para monitoramento

FORMATO: Linguagem executiva, m√°ximo 160 palavras, use apenas dados reais.
"""
        return prompt.strip()
    
    @staticmethod
    def agent_workload_analysis(agents_data: List[Dict[str, Any]], 
                               supervisor_name: str) -> str:
        """
        üë• Prompt para an√°lise de carga de trabalho dos agentes
        """
        if not agents_data:
            return "Nenhum agente ativo para an√°lise."
        
        total_tickets = sum(agent['current_tickets'] for agent in agents_data)
        avg_tickets = total_tickets / len(agents_data) if agents_data else 0
        
        prompt = f"""
Voc√™ √© especialista em distribui√ß√£o de carga de trabalho em RH.

CONTEXTO: Analise equipe do supervisor {supervisor_name} que atende funcion√°rios internos.

DADOS EXATOS DA EQUIPE:
- Total de agentes: {len(agents_data)}
- Total de atendimentos: {total_tickets}
- M√©dia por agente: {avg_tickets:.1f}

DISTRIBUI√á√ÉO REAL POR AGENTE:
"""
        
        for agent in agents_data:
            current = agent['current_tickets']
            change = agent.get('change', 0)
            prompt += f"‚Ä¢ {agent['agent']['name']}: {current} atendimentos ({change:+d})\n"
        
        prompt += f"""
REGRAS:
- Use APENAS os n√∫meros fornecidos
- Foque em atendimento interno de RH

AN√ÅLISE SOLICITADA:

1. DISTRIBUI√á√ÉO ATUAL
   - A carga est√° equilibrada entre agentes?
   - Identifique desequil√≠brios problem√°ticos

2. IDENTIFICA√á√ÉO DE RISCOS
   - Agentes sobrecarregados ou subutilizados
   - Riscos para qualidade do atendimento

3. REDISTRIBUI√á√ÉO SUGERIDA
   - Como rebalancear a carga entre agentes?
   - Crit√©rios para redistribui√ß√£o

4. A√á√ïES PREVENTIVAS
   - Como manter equil√≠brio futuro?
   - Monitoramento recomendado

FORMATO: Recomenda√ß√µes pr√°ticas, m√°ximo 120 palavras.
"""
        return prompt.strip()
    
    @staticmethod
    def anomaly_detection(supervisor_data: Dict[str, Any], 
                         historical_context: Optional[Dict] = None) -> str:
        """
        üîç Prompt para detec√ß√£o de anomalias
        """
        supervisor = supervisor_data['supervisor']['name']
        change_percent = supervisor_data['comparison']['percent_change']
        current_tickets = supervisor_data['current_week']['total_tickets']
        agents = supervisor_data['current_week']['agents_performance']
        
        # Identificar anomalias reais
        anomalies = []
        
        if abs(change_percent) >= 40:
            anomalies.append(f"Varia√ß√£o extrema de {change_percent:+.1f}% nos atendimentos")
        
        for agent in agents:
            agent_change_percent = (agent['change'] / agent['previous_tickets'] * 100) if agent['previous_tickets'] > 0 else 0
            if abs(agent_change_percent) >= 75:
                anomalies.append(f"{agent['agent']['name']}: varia√ß√£o de {agent_change_percent:+.1f}%")
            if agent['current_tickets'] >= 30:
                anomalies.append(f"{agent['agent']['name']}: {agent['current_tickets']} atendimentos (alta carga)")
        
        prompt = f"""
Voc√™ √© analista de dados de RH especializado em detec√ß√£o de padr√µes at√≠picos.

CONTEXTO: Sistema interno onde supervisor {supervisor} atende funcion√°rios.

DADOS EXATOS:
- Supervisor: {supervisor}
- Atendimentos atuais: {current_tickets}
- Varia√ß√£o: {change_percent:+.1f}%
- Agentes na equipe: {len(agents)}

ANOMALIAS DETECTADAS: {len(anomalies)}
"""
        
        for i, anomaly in enumerate(anomalies, 1):
            prompt += f"{i}. {anomaly}\n"
        
        prompt += f"""
REGRAS:
- Use APENAS os dados fornecidos
- Foque em causas internas de RH

INVESTIGA√á√ÉO:

1. AN√ÅLISE DAS ANOMALIAS
   - Poss√≠veis causas internas
   - Eventos pontuais ou tend√™ncias?

2. CLASSIFICA√á√ÉO DE RISCO
   - Criticidade para opera√ß√£o de RH
   - Impacto no atendimento aos funcion√°rios

3. A√á√ïES IMEDIATAS
   - O que fazer agora?
   - Quem deve ser notificado?

4. PREVEN√á√ÉO FUTURA
   - Como detectar precocemente?
   - Medidas preventivas

FORMATO: An√°lise objetiva, m√°ximo 130 palavras.
"""
        return prompt.strip()
    
    @staticmethod
    def custom_insight_prompt(context: str, data_summary: str, question: str) -> str:
        """
        üé® Prompt personalizado para insights espec√≠ficos
        """
        prompt = f"""
Voc√™ √© consultor s√™nior de RH especializado em atendimento interno.

CONTEXTO: {context}

DADOS DISPON√çVEIS:
{data_summary}

PERGUNTA ESPEC√çFICA:
{question}

REGRAS:
- Use APENAS dados fornecidos
- Foque em RH interno
- Seja espec√≠fico e action√°vel

AN√ÅLISE:
- Resposta fundamentada nos dados reais
- M√°ximo 100 palavras
- Recomenda√ß√µes pr√°ticas para gest√£o

FORMATO: Resposta direta e concreta.
"""
        return prompt.strip()


# Fun√ß√µes de conveni√™ncia para uso direto
def get_global_analysis_prompt(global_stats: Dict[str, Any], weekly_data: Dict[str, Any]) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt de an√°lise global"""
    return PromptBuilder.global_trend_analysis(global_stats, weekly_data)


def get_supervisor_analysis_prompt(supervisor_data: Dict[str, Any], weekly_data: Dict[str, Any], ranking: Optional[int] = None) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt de an√°lise de supervisor"""
    return PromptBuilder.supervisor_performance_analysis(supervisor_data, weekly_data, ranking)


def get_strategic_prompt(weekly_data: Dict[str, Any]) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt estrat√©gico"""
    return PromptBuilder.strategic_recommendations(weekly_data)