# ai_reports/ai_prompts.py
"""
üî§ AI Prompts - Prompts Estruturados para An√°lise IA
Cole√ß√£o de prompts especializados para diferentes tipos de an√°lise
"""

from typing import Dict, List, Any, Optional
from datetime import datetime


class PromptBuilder:
    """
    üî§ Construtor de prompts especializados para an√°lise IA
    
    Gera prompts otimizados para an√°lise de escala√ß√µes em empresa de contabilidade
    """
    
    @staticmethod
    def global_trend_analysis(global_stats: Dict[str, Any], weekly_data: Dict[str, Any]) -> str:
        """
        üåç Prompt para an√°lise de tend√™ncias globais
        """
        current_tickets = global_stats['current_week']['total_tickets']
        previous_tickets = global_stats['previous_week']['total_tickets']
        change = global_stats['comparison']['absolute_change']
        change_percent = global_stats['comparison']['percent_change']
        active_supervisors = global_stats['current_week']['active_supervisors']
        period = weekly_data['metadata']['current_week']['period_label']
        
        prompt = f"""
Voc√™ √© um analista de opera√ß√µes de uma empresa de contabilidade.

CONTEXTO DO SISTEMA:
- AtendePro registra escala√ß√µes de casos complexos para supervisores
- Agentes atendem clientes, quando n√£o conseguem resolver, escalam para supervisores
- Tamb√©m registra atendimentos internos (quest√µes trabalhistas dos funcion√°rios)
- Cada atendimento representa um caso que exigiu conhecimento especializado

DADOS REAIS DO PER√çODO:
- Per√≠odo analisado: {period}
- Total de escala√ß√µes/atendimentos: {current_tickets}
- Per√≠odo anterior: {previous_tickets}
- Varia√ß√£o: {change:+d} ({change_percent:+.1f}%)
- Supervisores ativos: {active_supervisors}

AN√ÅLISE SOLICITADA:

1. INTERPRETA√á√ÉO DA VARIA√á√ÉO
   - O que significa {change_percent:+.1f}% de varia√ß√£o nas escala√ß√µes?
   - Indica melhoria ou piora na autonomia dos agentes?

2. POSS√çVEIS CAUSAS
   - Agentes precisando mais suporte t√©cnico?
   - Casos mais complexos surgindo?
   - Mudan√ßas na legisla√ß√£o cont√°bil?

3. IMPACTO OPERACIONAL
   - Como isso afeta a carga dos supervisores?
   - Indica necessidade de treinamento dos agentes?

4. RECOMENDA√á√ïES
   - A√ß√µes para otimizar escala√ß√µes
   - Como melhorar autonomia dos agentes

FORMATO: Use apenas os dados fornecidos, m√°ximo 140 palavras, foque em contabilidade.
"""
        return prompt.strip()
    
    @staticmethod
    def supervisor_performance_analysis(supervisor_data: Dict[str, Any], 
                                       weekly_data: Dict[str, Any],
                                       ranking_position: Optional[int] = None) -> str:
        """
        üë§ Prompt para an√°lise de performance de supervisor
        """
        supervisor = supervisor_data['supervisor']['name']
        current = supervisor_data['current_week']['total_tickets']
        previous = supervisor_data['previous_week']['total_tickets']
        change = supervisor_data['comparison']['absolute_change']
        change_percent = supervisor_data['comparison']['percent_change']
        
        agents = supervisor_data['current_week']['agents_performance']
        agents_count = len(agents)
        
        ranking_text = f"(#{ranking_position} no ranking)" if ranking_position else ""
        
        prompt = f"""
Voc√™ √© um gestor de opera√ß√µes de contabilidade analisando escala√ß√µes de casos.

CONTEXTO:
- {supervisor} √© supervisor que resolve casos complexos escalados pelos agentes
- Agentes escalam quando n√£o conseguem resolver problemas dos clientes
- Sistema tamb√©m registra atendimentos internos (quest√µes de funcion√°rios)

DADOS EXATOS:
- Supervisor: {supervisor} {ranking_text}
- Per√≠odo: {weekly_data['metadata']['current_week']['period_label']}
- Escala√ß√µes recebidas: {current} (anterior: {previous})
- Varia√ß√£o: {change:+d} ({change_percent:+.1f}%)
- Agentes que escalaram: {agents_count}

ESCALA√á√ïES POR AGENTE:
"""
        
        # Adicionar dados dos agentes
        for agent in agents[:5]:  # Top 5 agentes
            agent_change = agent['change']
            prompt += f"‚Ä¢ {agent['agent']['name']}: {agent['current_tickets']} escala√ß√µes ({agent_change:+d})\n"
        
        prompt += f"""
AN√ÅLISE ESPEC√çFICA:

1. PERFORMANCE DO SUPERVISOR
   - {current} escala√ß√µes indica sobrecarga ou demanda normal?
   - Varia√ß√£o de {change_percent:+.1f}% √© preocupante?

2. AN√ÅLISE DOS AGENTES
   - Quais agentes est√£o escalando mais casos?
   - Indica necessidade de treinamento espec√≠fico?
   - Algum agente demonstrando evolu√ß√£o/autonomia?

3. DISTRIBUI√á√ÉO DE CARGA
   - A distribui√ß√£o entre agentes est√° equilibrada?
   - Algum agente pode estar sobrecarregado ou ocioso?

4. RECOMENDA√á√ïES PR√ÅTICAS
   - Como reduzir escala√ß√µes desnecess√°rias?
   - Quais agentes precisam de suporte adicional?
   - A√ß√µes para pr√≥xima semana

FORMATO: Use apenas dados fornecidos, m√°ximo 120 palavras, foque em contabilidade.
"""
        return prompt.strip()
    
    @staticmethod
    def strategic_recommendations(weekly_data: Dict[str, Any]) -> str:
        """
        üéØ Prompt para recomenda√ß√µes estrat√©gicas
        """
        supervisors = weekly_data['supervisors_data']
        global_stats = weekly_data['global_stats']
        
        # An√°lise dos supervisores
        total_supervisors = len(supervisors)
        high_load = [s for s in supervisors if s['comparison']['percent_change'] >= 20]
        decreasing_load = [s for s in supervisors if s['comparison']['percent_change'] <= -20]
        stable = [s for s in supervisors if abs(s['comparison']['percent_change']) < 20]
        
        # Supervisor com mais escala√ß√µes
        top_supervisor = max(supervisors, key=lambda x: x['current_week']['total_tickets']) if supervisors else None
        
        prompt = f"""
Voc√™ √© diretor de opera√ß√µes de empresa de contabilidade analisando escala√ß√µes.

CONTEXTO:
- Sistema registra casos complexos escalados pelos agentes para supervisores
- Cada escala√ß√£o indica que agente n√£o conseguiu resolver sozinho
- Meta: reduzir escala√ß√µes melhorando autonomia dos agentes

DADOS DO SISTEMA:
- Per√≠odo: {weekly_data['metadata']['current_week']['period_label']}
- Total de escala√ß√µes: {global_stats['current_week']['total_tickets']}
- Varia√ß√£o geral: {global_stats['comparison']['absolute_change']:+d} ({global_stats['comparison']['percent_change']:+.1f}%)
- Supervisores ativos: {total_supervisors}

DISTRIBUI√á√ÉO DE CARGA:
- Supervisores com aumento de escala√ß√µes (+20%): {len(high_load)}
- Supervisores com carga est√°vel: {len(stable)}
- Supervisores com redu√ß√£o de escala√ß√µes (-20%): {len(decreasing_load)}
"""
        
        if top_supervisor:
            prompt += f"‚Ä¢ Maior volume: {top_supervisor['supervisor']['name']} ({top_supervisor['current_week']['total_tickets']} escala√ß√µes)\n"
        
        prompt += f"""
RECOMENDA√á√ïES ESTRAT√âGICAS:

1. REDISTRIBUI√á√ÉO DE CARGA
   - Como balancear escala√ß√µes entre supervisores?
   - Realoca√ß√£o de agentes entre equipes?

2. CAPACITA√á√ÉO DE AGENTES
   - Quais agentes precisam de treinamento t√©cnico?
   - Temas de contabilidade que geram mais escala√ß√µes?

3. OTIMIZA√á√ÉO DE PROCESSOS
   - Como reduzir escala√ß√µes desnecess√°rias?
   - Ferramentas para aumentar autonomia dos agentes?

4. MONITORAMENTO DE PERFORMANCE
   - Indicadores para detectar sobrecarga precocemente?
   - M√©tricas de evolu√ß√£o dos agentes?

5. GEST√ÉO DE COMPLEXIDADE
   - Como identificar casos que sempre escalam?
   - Especializa√ß√£o de supervisores por tipo de problema?

FORMATO: 5 recomenda√ß√µes espec√≠ficas, m√°ximo 160 palavras, foque em contabilidade.
"""
        return prompt.strip()
    
    @staticmethod
    def executive_summary(weekly_data: Dict[str, Any], 
                         global_analysis: Dict[str, Any],
                         supervisors_analysis: List[Dict[str, Any]]) -> str:
        """
        üìã Prompt para resumo executivo
        """
        period = weekly_data['metadata']['current_week']['period_label']
        total_tickets = weekly_data['global_stats']['current_week']['total_tickets']
        change = weekly_data['global_stats']['comparison']['absolute_change']
        change_percent = weekly_data['global_stats']['comparison']['percent_change']
        
        # An√°lise dos supervisores
        if supervisors_analysis:
            top_performer = max(supervisors_analysis, key=lambda x: x['key_metrics']['current_tickets'])
            high_variance = [s for s in supervisors_analysis if 
                           abs(s['key_metrics']['change_percent']) >= 25]
        else:
            top_performer = None
            high_variance = []
        
        prompt = f"""
Voc√™ √© executivo de empresa de contabilidade analisando escala√ß√µes operacionais.

CONTEXTO:
- Sistema registra casos complexos que agentes escalam para supervisores
- Escala√ß√µes indicam necessidade de conhecimento especializado
- Meta empresarial: desenvolver autonomia dos agentes

DADOS EXECUTIVOS - {period}:
- Total de escala√ß√µes: {total_tickets}
- Varia√ß√£o: {change:+d} ({change_percent:+.1f}%)
- Supervisores monitorados: {len(supervisors_analysis)}
- Supervisores com varia√ß√£o alta: {len(high_variance)}
"""
        
        if top_performer:
            prompt += f"‚Ä¢ Maior volume: {top_performer['supervisor_name']} ({top_performer['key_metrics']['current_tickets']} escala√ß√µes)\n"
        
        prompt += f"""
RESUMO EXECUTIVO:

1. STATUS OPERACIONAL
   - Situa√ß√£o geral das escala√ß√µes na contabilidade
   - Impacto na produtividade dos supervisores

2. PONTOS CR√çTICOS
   - Supervisores sobrecarregados com escala√ß√µes
   - Agentes que precisam de desenvolvimento urgente

3. TEND√äNCIAS IDENTIFICADAS
   - Padr√µes nas escala√ß√µes (tipos de casos, complexidade)
   - Evolu√ß√£o da autonomia dos agentes

4. DECIS√ïES NECESS√ÅRIAS
   - Investimentos em treinamento
   - Redistribui√ß√£o de equipes ou especializa√ß√£o

5. PR√ìXIMAS A√á√ïES
   - Metas para redu√ß√£o de escala√ß√µes
   - Plano de capacita√ß√£o dos agentes

FORMATO: Linguagem executiva, m√°ximo 140 palavras, foque em resultados de contabilidade.
"""
        return prompt.strip()
    
    @staticmethod
    def agent_workload_analysis(agents_data: List[Dict[str, Any]], 
                               supervisor_name: str) -> str:
        """
        üë• Prompt para an√°lise de carga de trabalho dos agentes
        """
        if not agents_data:
            return "Nenhuma escala√ß√£o de agente registrada."
        
        total_tickets = sum(agent['current_tickets'] for agent in agents_data)
        avg_tickets = total_tickets / len(agents_data) if agents_data else 0
        
        prompt = f"""
Voc√™ √© gestor de equipe de contabilidade analisando escala√ß√µes dos agentes.

CONTEXTO:
- Agentes escalam casos complexos para supervisor {supervisor_name}
- Escala√ß√µes indicam dificuldade t√©cnica ou casos incomuns
- Meta: desenvolver autonomia dos agentes

DADOS DA EQUIPE:
- Agentes ativos: {len(agents_data)}
- Total de escala√ß√µes: {total_tickets}
- M√©dia por agente: {avg_tickets:.1f}

ESCALA√á√ïES POR AGENTE:
"""
        
        for agent in agents_data:
            current = agent['current_tickets']
            change = agent.get('change', 0)
            status = "üî¥" if current >= avg_tickets * 1.8 else "üü°" if current >= avg_tickets * 1.2 else "üü¢"
            prompt += f"‚Ä¢ {status} {agent['agent']['name']}: {current} escala√ß√µes ({change:+d})\n"
        
        prompt += f"""
AN√ÅLISE DE DESENVOLVIMENTO:

1. AUTONOMIA DOS AGENTES
   - Quais agentes est√£o evoluindo (menos escala√ß√µes)?
   - Quais agentes precisam de mais suporte t√©cnico?

2. DISTRIBUI√á√ÉO DE DIFICULDADES
   - Carga de escala√ß√µes est√° equilibrada?
   - Algum agente est√° sobrecarregando supervisores?

3. OPORTUNIDADES DE TREINAMENTO
   - Temas de contabilidade que geram mais escala√ß√µes?
   - Agentes prontos para casos mais complexos?

4. A√á√ïES RECOMENDADAS
   - Redistribui√ß√£o de responsabilidades?
   - Treinamentos espec√≠ficos necess√°rios?

FORMATO: Recomenda√ß√µes pr√°ticas para contabilidade, m√°ximo 100 palavras.
"""
        return prompt.strip()
    
    @staticmethod
    def anomaly_detection(supervisor_data: Dict[str, Any], 
                         historical_context: Optional[Dict] = None) -> str:
        """
        üîç Prompt para detec√ß√£o de anomalias
        """
        supervisor = supervisor_data['supervisor']['name']
        change_percent = supervisor_data['comparison']['percent_change']
        current_tickets = supervisor_data['current_week']['total_tickets']
        agents = supervisor_data['current_week']['agents_performance']
        
        # Identificar anomalias
        anomalies = []
        
        if abs(change_percent) >= 50:
            anomalies.append(f"Varia√ß√£o extrema de {change_percent:+.1f}% nas escala√ß√µes")
        
        if current_tickets >= 40:
            anomalies.append(f"Volume alto: {current_tickets} escala√ß√µes (poss√≠vel sobrecarga)")
        
        for agent in agents:
            if agent['current_tickets'] >= 15:
                anomalies.append(f"{agent['agent']['name']}: {agent['current_tickets']} escala√ß√µes (necessita treinamento?)")
            
            agent_change_percent = (agent['change'] / agent['previous_tickets'] * 100) if agent['previous_tickets'] > 0 else 0
            if agent_change_percent >= 100:
                anomalies.append(f"{agent['agent']['name']}: aumento de {agent_change_percent:.0f}% nas escala√ß√µes")
        
        prompt = f"""
Voc√™ √© analista de qualidade de empresa de contabilidade.

CONTEXTO:
- {supervisor} recebe escala√ß√µes de casos complexos dos agentes
- Anomalias podem indicar problemas de treinamento ou sobrecarga

DADOS:
- Supervisor: {supervisor}
- Escala√ß√µes atuais: {current_tickets}
- Varia√ß√£o: {change_percent:+.1f}%
- Agentes na equipe: {len(agents)}

ANOMALIAS DETECTADAS: {len(anomalies)}
"""
        
        for i, anomaly in enumerate(anomalies, 1):
            prompt += f"{i}. {anomaly}\n"
        
        prompt += f"""
INVESTIGA√á√ÉO:

1. CAUSAS POSS√çVEIS
   - Casos mais complexos aparecendo?
   - Agentes precisando de mais treinamento?
   - Mudan√ßas na legisla√ß√£o cont√°bil?

2. IMPACTO OPERACIONAL
   - Risco de sobrecarga do supervisor?
   - Qualidade do atendimento comprometida?

3. A√á√ïES IMEDIATAS
   - Redistribui√ß√£o tempor√°ria de casos?
   - Suporte adicional necess√°rio?

4. PREVEN√á√ÉO
   - Treinamentos espec√≠ficos?
   - Monitoramento mais frequente?

FORMATO: An√°lise objetiva para contabilidade, m√°ximo 110 palavras.
"""
        return prompt.strip()
    
    @staticmethod
    def custom_insight_prompt(context: str, data_summary: str, question: str) -> str:
        """
        üé® Prompt personalizado para insights espec√≠ficos
        """
        prompt = f"""
Voc√™ √© consultor especializado em opera√ß√µes de contabilidade.

CONTEXTO: {context}

DADOS: {data_summary}

PERGUNTA: {question}

REGRAS:
- Foque em escala√ß√µes e desenvolvimento de agentes
- Use apenas dados fornecidos
- Contexto: empresa de contabilidade

AN√ÅLISE: Resposta pr√°tica, m√°ximo 80 palavras.
"""
        return prompt.strip()


# Fun√ß√µes de conveni√™ncia para uso direto
def get_global_analysis_prompt(global_stats: Dict[str, Any], weekly_data: Dict[str, Any]) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt de an√°lise global"""
    return PromptBuilder.global_trend_analysis(global_stats, weekly_data)


def get_supervisor_analysis_prompt(supervisor_data: Dict[str, Any], weekly_data: Dict[str, Any], ranking: Optional[int] = None) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt de an√°lise de supervisor"""
    return PromptBuilder.supervisor_performance_analysis(supervisor_data, weekly_data, ranking)


def get_strategic_prompt(weekly_data: Dict[str, Any]) -> str:
    """üîß Fun√ß√£o utilit√°ria para prompt estrat√©gico"""
    return PromptBuilder.strategic_recommendations(weekly_data)